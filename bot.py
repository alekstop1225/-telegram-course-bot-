import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import asyncio
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"
ADMIN_ID = 123456789  # –í–∞—à ID –≤ Telegram
LEADCONVERTER_WEBHOOK = "https://–≤–∞—à_leadconverter_url/webhook"

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üìö –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫"))
    kb.add(types.KeyboardButton("üí° –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"))
    return kb

def get_buy_kb():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –∫—É—Ä—Å", callback_data="buy_course"))
    return kb

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–Ω–∫–µ—Ç—ã
class Form(StatesGroup):
    problem = State()
    email = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
        "–Ø –±–æ—Ç —à–∫–æ–ª—ã [–ù–∞–∑–≤–∞–Ω–∏–µ]. –ü–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Å–≤–æ–∏—Ç—å [—Ç–µ–º–∞ –∫—É—Ä—Å–∞].\n\n"
        "üìå –ü–æ–ª—É—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫ –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:",
        reply_markup=get_main_kb()
    )
    await send_sequence(message.from_user.id)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_sequence(user_id):
    messages = [
        ("üìå –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –≤ [—Ç–µ–º–∞]?", None),
        ("üîç –í–æ—Ç —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:", "solution_video.mp4"),
    ]
    for text, media in messages:
        if media:
            await bot.send_video(user_id, types.InputFile(media), caption=text)
        else:
            await bot.send_message(user_id, text)
        await asyncio.sleep(3600)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª 1 —á–∞—Å

# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ LeadConverter
async def send_to_leadconverter(email, name, problem):
    payload = {
        "email": email,
        "name": name,
        "problem": problem,
        "source": "Telegram Bot"
    }
    requests.post(LEADCONVERTER_WEBHOOK, json=payload)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∫–µ—Ç—ã
@dp.message_handler(Text(equals="
